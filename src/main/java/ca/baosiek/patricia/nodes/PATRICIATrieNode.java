/**
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the “Software”), to deal in the Software without restriction, including without
 * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do so.
 *
 * This Software is only meant to serve as an accompany support to the story "PATRICIA Trie's Nuts and Bolts"
 * published on Medium.com
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHOR OR COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*
This class constitute the building block of a PATRICIA Trie, i.e.,
a trie implemented (Practical Algorithm to Retrieve Information Coded In Alphanumeric).
It is meant to serve in symbol table kind of data structure where every element
contains a <KEY, VALUE> pair.
 */
package ca.baosiek.patricia.nodes;

import java.util.Objects;

public class PATRICIATrieNode<Value> {

    private final String key; //The key of the node
    private Value value; //The value of the node
    private int indexBit; //The position of the where this key differs from parent's key

    private PATRICIATrieNode<Value> left; //Pointer to the left child.
    private PATRICIATrieNode<Value> right; //Pointer to the right child

    /**
     *
     * @param key key of the node. Cannot be null
     * @param value value of the node. Can be null.
     * @param indexBit position of the where this key differs from parent's key. Can be zero
     */
    public PATRICIATrieNode(String key, Value value, int indexBit){

        /*
        Throws exception in case of a null key.
         */
        if (key == null) throw new NullPointerException("Key cannot be null.");

        this.key = key;
        this.value = value;
        this.indexBit = indexBit;
        this.left = null;
        this.right = null;
    }


    public String getKey() {
        return key;
    }

    public Value getValue() {
        return value;
    }

    public void setValue(Value value) {
        this.value = value;
    }

    public int getIndexBit() {
        return indexBit;
    }

    public void setIndexBit(int indexBit) {
        this.indexBit = indexBit;
    }

    public PATRICIATrieNode<Value> getLeft() {
        return left;
    }

    public void setLeft(PATRICIATrieNode<Value> left) {
        this.left = left;
    }

    public PATRICIATrieNode<Value> getRight() {
        return right;
    }

    public void setRight(PATRICIATrieNode<Value> right) {
        this.right = right;
    }

    @Override
    public String toString(){

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("{ Key=%s, ", this.key));
        sb.append(String.format("Value=%s, ", this.value));
        sb.append(String.format("IndexBit=%s, ", this.indexBit));
        if (this.left != null) sb.append(String.format("Left=%s, ", this.left.key));
        if (this.right != null) sb.append(String.format("Right=%s, ", this.right.key));
        sb.append(" }");

        return sb.toString();
    }

    @Override
    /*
    Auto generated by IntelliJ
     */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PATRICIATrieNode<?> that = (PATRICIATrieNode<?>) o;
        return indexBit == that.indexBit &&
                key.equals(that.key) &&
                Objects.equals(value, that.value) &&
                Objects.equals(left, that.left) &&
                Objects.equals(right, that.right);
    }

    @Override
    /*
    Auto generated by IntelliJ
     */
    public int hashCode() {
        return Objects.hash(key, value, indexBit, left, right);
    }
}
